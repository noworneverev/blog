"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2603],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(t),m=o,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return t?r.createElement(f,l(l({ref:n},c),{},{components:t})):r.createElement(f,l({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var u=2;u<a;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1146:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return d}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),l=["components"],i={slug:"general-ledger-prepare-awpp1",title:"\u3010VBA\u3011 General Ledger Preparer (1/1)",authors:"mike",tags:["vba","excel"]},s=void 0,u={permalink:"/blog/general-ledger-prepare-awpp1",source:"@site/blog/2019-04-01-general-ledger-prepare-awpp1.md",title:"\u3010VBA\u3011 General Ledger Preparer (1/1)",description:"Download and Demo",date:"2019-04-01T00:00:00.000Z",formattedDate:"April 1, 2019",tags:[{label:"vba",permalink:"/blog/tags/vba"},{label:"excel",permalink:"/blog/tags/excel"}],readingTime:3.015,truncated:!0,authors:[{name:"Yan-Ying Liao",title:"Maintainer of Go Germany/Termin Line Group",url:"https://github.com/noworneverev",imageURL:"https://avatars.githubusercontent.com/u/18380064?s=400&u=76e0d43fe3f371c897942b8fe18b840b177f0a9d&v=4",key:"mike"}],frontMatter:{slug:"general-ledger-prepare-awpp1",title:"\u3010VBA\u3011 General Ledger Preparer (1/1)",authors:"mike",tags:["vba","excel"]},prevItem:{title:"\u3010\u5fc3\u5f97\u3011 \u4e0a\u73ed\u65cf\u81ea\u4fee\u4e00\u6230322\u5fc3\u5f97 V154 Q168 AW3.5",permalink:"/blog/gre"},nextItem:{title:"\u3010VBA\u3011 Automated Working Paper Project (Write VBA for You for Free)",permalink:"/blog/automated-working-paper-project"}},c={authorsImageUrls:[void 0]},d=[{value:"Download and Demo",id:"download-and-demo",level:3},{value:"Demand",id:"demand",level:3}],p={toc:d};function m(e){var n=e.components,t=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"download-and-demo"},"Download and Demo"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"If you don't know why I made this, please refer to my another post: ",(0,a.kt)("a",{parentName:"p",href:"automated-working-paper-project"},"Automated Working Paper Project (Write VBA for You for Free)")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Download:"),"  ",(0,a.kt)("a",{parentName:"p",href:"https://goo.gl/NKNWKf"},"GLPreparer.xlsm"),"\n",(0,a.kt)("strong",{parentName:"p"},"Demo:")," ",(0,a.kt)("img",{parentName:"p",src:"https://imgur.com/83fB2Qo.gif",alt:null})),(0,a.kt)("h3",{id:"demand"},"Demand"),(0,a.kt)("hr",null),(0,a.kt)("p",null," To Combine descriptions of the general ledger which are been cut when imported into Excel."),(0,a.kt)("p",null,"It's quite often that the PBC files are in txt format. When importing such file into Excel, sometimes it really takes time to adjust it to a clean format that you you could verify its amounts or to sample some vouchers from it."),(0,a.kt)("p",null,"From the acutal instance here, the descriptions are been cut when the client export the GL from its system, like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"1070801 TT0801  xxx bank transfer to\n                xxx bank              debit   30,000\n1070802 TT0802  Issue covertible\n                bond                  debit   30,000\n")),(0,a.kt)("p",null,"When the data is vast and messy in a regulation, the VBA is super useful to deal with it. I could just loop through all the rows in the sheet, find all first rows that have numbers and concatenate descriptions belongs to them."),(0,a.kt)("p",null,"Below is the source code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'\'Author: Mike Liao\n\'Date: 2019/3/23\n\'Contact: n9102125@gmail.com\n\nSub Main()\n  Application.ScreenUpdating = False\n  ReadTxt\n  \n  \'\u65b0\u589e\u5de5\u4f5c\u8868\n    With ActiveSheet\n      ShName = "\u7e3d\u5206\u985e\u5e33(\u6574\u7406)"\n      .Copy After:=Sheets(Worksheets.Count)\n     End With\n    Sheets(Worksheets.Count).Name = ShName\n\n  \'\u5408\u4f75\n  Merge\n  \n  Application.ScreenUpdating = True\nEnd Sub\n\nFunction ReadTxt()\n\nSheets.Add After:=Sheets(Worksheets.Count)\nActiveSheet.Name = "\u539f\u59cb\u7e3d\u5206\u985e\u5e33"\nDim Ret\n    \n    Ret = Application.GetOpenFilename("\u6587\u5b57\u6a94\u6848 (*.txt), *.txt")\n\n    If Ret <> False Then\n        With ActiveSheet.QueryTables.Add(Connection:= _\n        "TEXT;" & Ret, Destination:=Range("$A$1"))\n        .Name = "textfromfile"\n        .FieldNames = True\n        .RowNumbers = False\n        .FillAdjacentFormulas = False\n        .PreserveFormatting = True\n        .RefreshOnFileOpen = False\n        .RefreshStyle = xlInsertDeleteCells\n        .SavePassword = False\n        .SaveData = True\n        .AdjustColumnWidth = True\n        .RefreshPeriod = 0\n        .TextFilePromptOnRefresh = False\n        .TextFilePlatform = 950\n        .TextFileStartRow = 1\n        .TextFileParseType = xlFixedWidth\n        .TextFileTextQualifier = xlTextQualifierDoubleQuote\n        .TextFileConsecutiveDelimiter = False\n        .TextFileTabDelimiter = True\n        .TextFileSemicolonDelimiter = False\n        .TextFileCommaDelimiter = False\n        .TextFileSpaceDelimiter = False\n        .TextFileColumnDataTypes = Array(1, 1, 1, 1, 1, 1)\n        .TextFileFixedColumnWidths = Array(17, 30, 18, 16, 5)\n        .TextFileTrailingMinusNumbers = True\n        .Refresh BackgroundQuery:=False\n\n        End With\n    End If\nEnd Function\n\nFunction Merge()\nDim rng As Range\nDim row As Range\nDim cel As Range\nDim StartIndex As Integer\nDim EndIndex As Integer\nDim i As Integer\nDim CountHowManyRowsNeededConcat As Integer\nDim Concatstring As String\n\nSet rng = Range("A1:A" & ActiveSheet.Range("A" & ActiveSheet.rows.Count).End(xlUp).row)\n\nFor Each cel In rng.Cells\n  If IsNumeric(Left(cel.Value, 3)) And (cel.Value <> 0) Then\n    StartIndex = cel.row\n    CountHowManyRowsNeededConcat = 0\n    Concatstring = ""\n    \n    \'\u8a08\u7b97\u8d77\u9ede\u53ca\u7d42\u9ede\n    For i = 0 To 5\n      If IsEmpty(Cells(StartIndex, 5).Offset(i, 0).Value) Then\n        CountHowManyRowsNeededConcat = CountHowManyRowsNeededConcat + 1\n      Else\n        Exit For\n      End If\n    Next\n    \n    \'\u5df2\u53d6\u5f97\u8d77\u9ede\u53ca\u7d42\u9ede\uff0c\u9032\u884c\u5b57\u4e32\u5408\u4f75\n    For j = 0 To CountHowManyRowsNeededConcat\n      Concatstring = Concatstring & Cells(StartIndex, 2).Offset(j, 0).Value\n      If j > 0 Then\n        Cells(StartIndex, 2).Offset(j, 0).Value = ""\n      End If\n    Next\n    Cells(StartIndex, 2).Value = Concatstring\n    \n    \'\u5c07\u6578\u5b57\u3001\u501f\u8cb8\u65b9\u3001\u9918\u984d\u79fb\u4e0a\u53bb\n    If CountHowManyRowsNeededConcat > 0 Then\n      Cells(StartIndex, 3).Value = Cells(StartIndex, 3).Offset(CountHowManyRowsNeededConcat, 0).Value\n      Cells(StartIndex, 4).Value = Cells(StartIndex, 4).Offset(CountHowManyRowsNeededConcat, 0).Value\n      Cells(StartIndex, 5).Value = Cells(StartIndex, 5).Offset(CountHowManyRowsNeededConcat, 0).Value\n      Cells(StartIndex, 6).Value = Cells(StartIndex, 6).Offset(CountHowManyRowsNeededConcat, 0).Value\n      Cells(StartIndex, 3).Offset(CountHowManyRowsNeededConcat, 0).Value = ""\n      Cells(StartIndex, 4).Offset(CountHowManyRowsNeededConcat, 0).Value = ""\n      Cells(StartIndex, 5).Offset(CountHowManyRowsNeededConcat, 0).Value = ""\n      Cells(StartIndex, 6).Offset(CountHowManyRowsNeededConcat, 0).Value = ""\n    End If\n  End If\nNext\n\nRemoveEmptyRows\n\nEnd Function\n\nFunction RemoveEmptyRows()\n  Dim r As Range, rows As Long, i As Long\n  Set r = ActiveSheet.Range("A1:F" & ActiveSheet.Range("A" & ActiveSheet.rows.Count).End(xlUp).row)\n  rows = r.rows.Count\n  For i = rows To 1 Step (-1)\n    If WorksheetFunction.CountA(r.rows(i)) = 0 Then r.rows(i).Delete\n  Next\nEnd Function\n')))}m.isMDXComponent=!0}}]);